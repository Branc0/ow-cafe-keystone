# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
}

type Coffee {
  id: ID!
  aroma: String
  taste: String
  body: String
  afterTaste: String
  roast: String
  variety: String
  process: String
  producer: Producer
}

input CoffeeWhereUniqueInput {
  id: ID
}

input CoffeeWhereInput {
  AND: [CoffeeWhereInput!]
  OR: [CoffeeWhereInput!]
  NOT: [CoffeeWhereInput!]
  id: IDFilter
  aroma: StringFilter
  taste: StringFilter
  body: StringFilter
  afterTaste: StringFilter
  roast: StringFilter
  variety: StringFilter
  process: StringFilter
  producer: ProducerWhereInput
}

input CoffeeOrderByInput {
  id: OrderDirection
  aroma: OrderDirection
  taste: OrderDirection
  body: OrderDirection
  afterTaste: OrderDirection
  roast: OrderDirection
  variety: OrderDirection
  process: OrderDirection
}

input CoffeeUpdateInput {
  aroma: String
  taste: String
  body: String
  afterTaste: String
  roast: String
  variety: String
  process: String
  producer: ProducerRelateToOneForUpdateInput
}

input ProducerRelateToOneForUpdateInput {
  create: ProducerCreateInput
  connect: ProducerWhereUniqueInput
  disconnect: Boolean
}

input CoffeeUpdateArgs {
  where: CoffeeWhereUniqueInput!
  data: CoffeeUpdateInput!
}

input CoffeeCreateInput {
  aroma: String
  taste: String
  body: String
  afterTaste: String
  roast: String
  variety: String
  process: String
  producer: ProducerRelateToOneForCreateInput
}

input ProducerRelateToOneForCreateInput {
  create: ProducerCreateInput
  connect: ProducerWhereUniqueInput
}

type Producer {
  id: ID!
  name: String
  farm: String
  county: String
  microregion: String
  altitude: String
  coffees(
    where: CoffeeWhereInput! = {}
    orderBy: [CoffeeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Coffee!]
  coffeesCount(where: CoffeeWhereInput! = {}): Int
}

input ProducerWhereUniqueInput {
  id: ID
}

input ProducerWhereInput {
  AND: [ProducerWhereInput!]
  OR: [ProducerWhereInput!]
  NOT: [ProducerWhereInput!]
  id: IDFilter
  name: StringFilter
  farm: StringFilter
  county: StringFilter
  microregion: StringFilter
  altitude: StringFilter
  coffees: CoffeeManyRelationFilter
}

input CoffeeManyRelationFilter {
  every: CoffeeWhereInput
  some: CoffeeWhereInput
  none: CoffeeWhereInput
}

input ProducerOrderByInput {
  id: OrderDirection
  name: OrderDirection
  farm: OrderDirection
  county: OrderDirection
  microregion: OrderDirection
  altitude: OrderDirection
}

input ProducerUpdateInput {
  name: String
  farm: String
  county: String
  microregion: String
  altitude: String
  coffees: CoffeeRelateToManyForUpdateInput
}

input CoffeeRelateToManyForUpdateInput {
  disconnect: [CoffeeWhereUniqueInput!]
  set: [CoffeeWhereUniqueInput!]
  create: [CoffeeCreateInput!]
  connect: [CoffeeWhereUniqueInput!]
}

input ProducerUpdateArgs {
  where: ProducerWhereUniqueInput!
  data: ProducerUpdateInput!
}

input ProducerCreateInput {
  name: String
  farm: String
  county: String
  microregion: String
  altitude: String
  coffees: CoffeeRelateToManyForCreateInput
}

input CoffeeRelateToManyForCreateInput {
  create: [CoffeeCreateInput!]
  connect: [CoffeeWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createCoffee(data: CoffeeCreateInput!): Coffee
  createCoffees(data: [CoffeeCreateInput!]!): [Coffee]
  updateCoffee(where: CoffeeWhereUniqueInput!, data: CoffeeUpdateInput!): Coffee
  updateCoffees(data: [CoffeeUpdateArgs!]!): [Coffee]
  deleteCoffee(where: CoffeeWhereUniqueInput!): Coffee
  deleteCoffees(where: [CoffeeWhereUniqueInput!]!): [Coffee]
  createProducer(data: ProducerCreateInput!): Producer
  createProducers(data: [ProducerCreateInput!]!): [Producer]
  updateProducer(
    where: ProducerWhereUniqueInput!
    data: ProducerUpdateInput!
  ): Producer
  updateProducers(data: [ProducerUpdateArgs!]!): [Producer]
  deleteProducer(where: ProducerWhereUniqueInput!): Producer
  deleteProducers(where: [ProducerWhereUniqueInput!]!): [Producer]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  coffees(
    where: CoffeeWhereInput! = {}
    orderBy: [CoffeeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Coffee!]
  coffee(where: CoffeeWhereUniqueInput!): Coffee
  coffeesCount(where: CoffeeWhereInput! = {}): Int
  producers(
    where: ProducerWhereInput! = {}
    orderBy: [ProducerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Producer!]
  producer(where: ProducerWhereUniqueInput!): Producer
  producersCount(where: ProducerWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
